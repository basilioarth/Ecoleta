/*BOX MODEL
Modelo de Caixa

Toda caixa tem: largura, espaçamento, preenchimentos, bordas, cor, fundo, maneira que é vista pelo html (display), alinhamentos.
*/

:root {
    --title-color: #322153;
    --primary-color: #34cb79;
}
/* Está referenciando a raiz do nosso documento html. Dentro do root poderemos colocar algumas informações que podem ser repetidas em formato de variáveis.
*/

* {
    margin: 0;
    padding: 0;
    /*Estamos zerando as margens de todas as box presentes no navegador.*/
}
/*Seletor que basicamente referencia todos os outros seletores.*/

html {
    font-family: 'Roboto', sans-serif;
}

body {
    background: #f0f0f5;
    -webkit-font-smoothing: antialiased;
}

a {
    text-decoration: none;
    /*Tira, de todos os elementos a do meu código html, o sublinhado*/
}

h1, h2, h3, h4, h5, h6 {
    font-family: 'Ubuntu', sans-serif;
    color: var(--title-color);
}

/* Utilizando o #page-home estamos acessando os elementos/tags do documento html em forma de cascata. */
#page-home {
    height: 100vh;
    /* assim como a porcentagem também é uma medida dinâmica. O html vai pegar toda a altura do view port height. Esse view port heigth é a parte "branca" 
    entre o primeiro elemento da tela e o topo da tela.*/
    background: url('../assets/extras-aula-1/icones/home-background.svg') no-repeat;
    /*o ../ indica para sairmos do diretório atual e ir para um diretório superior*/
    background-position: 35vw bottom;
    /*o eixo y vai colar no bottom e o x vai ficar a 35 view port width*/
}

#page-home .content {
/* o "." antes do content indica que esse estilo do css faz referÊncia a uma classe.*/ 
    width: 90%;
    /* se atingir menos que 1100px ele se ajusta a 90% da largura total da tela (uma distância de 10% do fim da tela - lado direiro)*/
    max-width: 1100px;
    height: 100%;

    margin: 0 auto;
    /*top e bottom espaçamento 0. Right e left espaçamento automático*/

    display: flex;
    flex-direction: column;
}

#page-home header {
    margin-top: 48px;
    display: flex;
     /*o display externo é block (ocupa a linha toda) e o display interno torna coloca os elementos da box um do lado do outro.*/
    align-items: center;
    justify-content: space-between; 
   
}

#page-home header a {
    display: flex;
    color: var(--title-color);
    font-weight: 700;
    /* negrito da fonte roboto que nós escolhemos.*/
}

#page-home header a span {
    margin-right: 16px;
    display: flex;

    background-image: url('../assets/extras-aula-1/icones/log-in.svg');

    width: 20px;
    height: 20px;
}

#page-home main {
    max-width: 560px;

    flex: 1;
    /*Preenche automaticamente todo o espaço que o main tiver.*/

    display: flex;
    flex-direction: column;
    justify-content: center;
}

#page-home main h1 {
    font-size: 54px;
}

#page-home main p {
    font-size: 24px;
    line-height: 38px;
    /* diferentemente de quando trabalhamos com box, é no line-height que temos a altura da linha do texto*/
    margin-top: 24px;
}

#page-home main a {
    width: 100%;
    max-width: 360px;
    height: 72px;

    border-radius: 8px;

    display: flex;
    align-items: center;

    margin-top: 40px;

    background-color: var(--primary-color);

    transition: 400ms;
    /*A transição entre as duas cores do botão será mais suave*/

    font-weight: bold;
    /*Bold indica que a letra ficará em negrito. Poderiamos indicar isso numericamente também; no caso, usando 700*/
}

#page-home main a:hover{
    /* Quando esse seletor a estiver com uma funcionalidade de hover ele consegue aplicar uma estilização especial.
    Em outras palras, quando o mouse estiver em cima o botão muda para a cor especificada abaixo.*/
    background-color: #2fb86e;
}

#page-home main a span {
    width: 72px;
    height: 72px;

    border-top-left-radius: 8px;
    border-bottom-left-radius: 8px;

    background-color: rgba(0, 0, 0, 0.08);
    /*Estamos usando o rgb alpha, que é o rgb definido através de números e com a adição do aplha que é a transparência*/

    display: flex;
    align-items: center;
    justify-content: center;
}

#page-home main a span::after {
/*Estamos criando um pseudo elemento aqui. É um elemento que não existe no html, mas que tem sua origem através do CSS*/
    content: "";
    background-image: url('../assets/extras-aula-1/icones/search.svg');
    /* Vale lembrar que para essa imagem aparecer na página web, por se tratar de uma tag spam, precisa ter definido uma largura, uma altura
    e um display. No caso, definimos a sua largura e altura aqui mesmo e definimos o display no pai dele: #page-home main a span*/

    width: 20px;
    height: 20px;
}

#page-home main a strong {
    flex: 1;
    /*Faz crescer toda a caixa*/
    color: white;
    text-align: center;
}

/*No CSS o @media é um conjunto de regras para algumas coisas que podemos configurar aqui*/
@media (max-width: 900px){
/* Quando a minha tela for menor que 900px ela vai começar a receber algumas regras. A seguir teremos conjuntos de CSS*/
    #page-home {
        background-position-x: 70vw;
    }

    #page-home .content {
        align-items: center;
        text-align: center;
    }

    #page-home header a {
        position: absolute;
        bottom: 48px;
        /*Joga o elemento a pra 48 pixels de diferença do fundo da página*/

        left: 50%;
        transform: translateX(-50%);
        /*Faz com que ele avhe o ponto médio do elemento e o centro dele fica a 50% de distância do lado esquerdo da tela*/
    }

    #page-home main {
        align-items: center;
    }
}

